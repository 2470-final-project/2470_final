package edu.pitt.isd.model.mapper;

import edu.pitt.isd.controller.user.vo.UserVO;
import edu.pitt.isd.model.dto.Users;
import edu.pitt.isd.model.dto.UsersExample;
import java.util.List;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

@Mapper
public interface UsersMapper {

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table users
     * 
     * @mbg.generated
     */
    @SelectProvider(type = UsersSqlProvider.class, method = "countByExample")
    long countByExample(UsersExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table users
     * 
     * @mbg.generated
     */
    @DeleteProvider(type = UsersSqlProvider.class, method = "deleteByExample")
    int deleteByExample(UsersExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table users
     * 
     * @mbg.generated
     */
    @Delete({ "delete from users", "where id = #{id,jdbcType=INTEGER}" })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table users
     * 
     * @mbg.generated
     */
    @Insert({ "insert into users (username, firstname, ", "lastname, password, ", "enabled, create_time, ", "update_time)",
            "values (#{username,jdbcType=VARCHAR}, #{firstname,jdbcType=VARCHAR}, ",
            "#{lastname,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, ",
            "#{enabled,jdbcType=BIT}, #{createTime,jdbcType=TIMESTAMP}, ", "#{updateTime,jdbcType=TIMESTAMP})" })
    @SelectKey(statement = "SELECT LAST_INSERT_ID()", keyProperty = "id", before = false, resultType = Integer.class)
    int insert(Users record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table users
     * 
     * @mbg.generated
     */
    @InsertProvider(type = UsersSqlProvider.class, method = "insertSelective")
    @SelectKey(statement = "SELECT LAST_INSERT_ID()", keyProperty = "id", before = false, resultType = Integer.class)
    int insertSelective(Users record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table users
     * 
     * @mbg.generated
     */
    @SelectProvider(type = UsersSqlProvider.class, method = "selectByExample")
    @Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "username", property = "username", jdbcType = JdbcType.VARCHAR),
            @Result(column = "firstname", property = "firstname", jdbcType = JdbcType.VARCHAR),
            @Result(column = "lastname", property = "lastname", jdbcType = JdbcType.VARCHAR),
            @Result(column = "password", property = "password", jdbcType = JdbcType.VARCHAR),
            @Result(column = "enabled", property = "enabled", jdbcType = JdbcType.BIT),
            @Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "update_time", property = "updateTime", jdbcType = JdbcType.TIMESTAMP) })
    List<Users> selectByExampleWithRowbounds(UsersExample example, RowBounds rowBounds);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table users
     * 
     * @mbg.generated
     */
    @SelectProvider(type = UsersSqlProvider.class, method = "selectByExample")
    @Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "username", property = "username", jdbcType = JdbcType.VARCHAR),
            @Result(column = "firstname", property = "firstname", jdbcType = JdbcType.VARCHAR),
            @Result(column = "lastname", property = "lastname", jdbcType = JdbcType.VARCHAR),
            @Result(column = "password", property = "password", jdbcType = JdbcType.VARCHAR),
            @Result(column = "enabled", property = "enabled", jdbcType = JdbcType.BIT),
            @Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "update_time", property = "updateTime", jdbcType = JdbcType.TIMESTAMP) })
    List<Users> selectByExample(UsersExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table users
     * 
     * @mbg.generated
     */
    @Select({ "select", "id, username, firstname, lastname, password, enabled, create_time, update_time", "from users",
            "where id = #{id,jdbcType=INTEGER}" })
    @Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "username", property = "username", jdbcType = JdbcType.VARCHAR),
            @Result(column = "firstname", property = "firstname", jdbcType = JdbcType.VARCHAR),
            @Result(column = "lastname", property = "lastname", jdbcType = JdbcType.VARCHAR),
            @Result(column = "password", property = "password", jdbcType = JdbcType.VARCHAR),
            @Result(column = "enabled", property = "enabled", jdbcType = JdbcType.BIT),
            @Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "update_time", property = "updateTime", jdbcType = JdbcType.TIMESTAMP) })
    Users selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table users
     * 
     * @mbg.generated
     */
    @UpdateProvider(type = UsersSqlProvider.class, method = "updateByExampleSelective")
    int updateByExampleSelective(@Param("record") Users record, @Param("example") UsersExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table users
     * 
     * @mbg.generated
     */
    @UpdateProvider(type = UsersSqlProvider.class, method = "updateByExample")
    int updateByExample(@Param("record") Users record, @Param("example") UsersExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table users
     * 
     * @mbg.generated
     */
    @UpdateProvider(type = UsersSqlProvider.class, method = "updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(Users record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table users
     * 
     * @mbg.generated
     */
    @Update({ "update users", "set username = #{username,jdbcType=VARCHAR},", "firstname = #{firstname,jdbcType=VARCHAR},",
            "lastname = #{lastname,jdbcType=VARCHAR},", "password = #{password,jdbcType=VARCHAR},",
            "enabled = #{enabled,jdbcType=BIT},", "create_time = #{createTime,jdbcType=TIMESTAMP},",
            "update_time = #{updateTime,jdbcType=TIMESTAMP}", "where id = #{id,jdbcType=INTEGER}" })
    int updateByPrimaryKey(Users record);

    @Select({ "SELECT u.id, u.username, u.firstname, u.lastname, u.enabled, u.create_time, u.update_time, a.authority AS role",
            "FROM users u LEFT JOIN authorities a ON u.id = a.id" })
    @Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "username", property = "username", jdbcType = JdbcType.VARCHAR),
            @Result(column = "firstname", property = "firstname", jdbcType = JdbcType.VARCHAR),
            @Result(column = "lastname", property = "lastname", jdbcType = JdbcType.VARCHAR),
            @Result(column = "role", property = "role", jdbcType = JdbcType.VARCHAR),
            @Result(column = "enabled", property = "enabled", jdbcType = JdbcType.BIT),
            @Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "update_time", property = "updateTime", jdbcType = JdbcType.TIMESTAMP) })
    List<UserVO> selectAll();

    @Select({ "SELECT u.id, u.username, u.firstname, u.lastname, u.enabled, u.create_time, u.update_time, a.authority AS role",
            "FROM users u LEFT JOIN authorities a ON u.id = a.id WHERE u.id = #{id,jdbcType=INTEGER}" })
    @Results({ @Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true),
            @Result(column = "username", property = "username", jdbcType = JdbcType.VARCHAR),
            @Result(column = "firstname", property = "firstname", jdbcType = JdbcType.VARCHAR),
            @Result(column = "lastname", property = "lastname", jdbcType = JdbcType.VARCHAR),
            @Result(column = "role", property = "role", jdbcType = JdbcType.VARCHAR),
            @Result(column = "enabled", property = "enabled", jdbcType = JdbcType.BIT),
            @Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "update_time", property = "updateTime", jdbcType = JdbcType.TIMESTAMP) })
    UserVO selectUserVOByPrimaryKey(int userId);
}